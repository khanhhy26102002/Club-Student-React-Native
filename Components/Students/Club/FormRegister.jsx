import React from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  Alert,
  ActivityIndicator,
  StyleSheet,
  SafeAreaView,
  Platform,
  KeyboardAvoidingView,
  ScrollView
} from "react-native";
import AsyncStorage from "@react-native-async-storage/async-storage";
import Header from "../../../Header/Header";
import { fetchBaseResponse } from "../../../utils/api";
import { Picker } from "@react-native-picker/picker";

const FormRegister = () => {
  const [data, setData] = React.useState([]);
  const [studentCode, setStudentCode] = React.useState("");
  const [email, setEmail] = React.useState("");
  const [fullName, setFullName] = React.useState("");
  const [major, setMajor] = React.useState("");
  const [clubId, setClubId] = React.useState("");
  const [loading, setLoading] = React.useState(false);
  React.useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetchBaseResponse("/majors", {
          method: "GET",
          headers: {
            "Content-Type": "application/json"
          }
        });
        if (response.status === 200) {
          setData(response.data);
        } else {
          throw new Error(`HTTP Status:${response.status}`);
        }
      } catch (error) {
        console.log("Error: ", error);
        Alert.alert("Kh√¥ng l·∫•y ƒë∆∞·ª£c ng√†nh");
      }
    };
    fetchData();
  }, []);
  const handleSubmit = async (e) => {
    e.preventDefault();

    const trimmedStudentCode = studentCode.trim();
    const trimmedEmail = email.trim();
    const trimmedFullName = fullName.trim();
    const trimmedMajor = major.trim();
    const clubIdNumber = Number(clubId);

    // Validate r·ªóng
    if (
      !trimmedStudentCode ||
      !trimmedEmail ||
      !trimmedFullName ||
      !trimmedMajor ||
      !clubId
    ) {
      Alert.alert(
        "‚ö†Ô∏è Thi·∫øu th√¥ng tin",
        "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ c√°c tr∆∞·ªùng."
      );
      return;
    }

    // Validate m√£ s·ªë sinh vi√™n: ch·ªâ cho ch·ªØ, s·ªë, d√†i √≠t nh·∫•t 5 k√Ω t·ª±
    const studentCodeRegex = /^[a-zA-Z0-9]{5,}$/;
    if (!studentCodeRegex.test(trimmedStudentCode)) {
      Alert.alert(
        "‚ö†Ô∏è M√£ sinh vi√™n kh√¥ng h·ª£p l·ªá",
        "M√£ sinh vi√™n ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ/s·ªë v√† t·ªëi thi·ªÉu 5 k√Ω t·ª±."
      );
      return;
    }

    // Validate email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(trimmedEmail)) {
      Alert.alert(
        "‚ö†Ô∏è Email kh√¥ng h·ª£p l·ªá",
        "Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng email."
      );
      return;
    }

    // Validate clubId
    if (isNaN(clubIdNumber) || clubIdNumber <= 0) {
      Alert.alert(
        "‚ö†Ô∏è C√¢u l·∫°c b·ªô kh√¥ng h·ª£p l·ªá",
        "Vui l√≤ng ch·ªçn m·ªôt CLB h·ª£p l·ªá."
      );
      return;
    }

    setLoading(true);
    const token = await AsyncStorage.getItem("jwt");

    try {
      const response = await fetchBaseResponse(
        "/memberships/membership-register",
        {
          method: "POST",
          headers: {
            Authorization: `Bearer ${token}`
          },
          data: {
            studentCode: trimmedStudentCode,
            email: trimmedEmail,
            fullName: trimmedFullName,
            major: trimmedMajor,
            clubId: clubIdNumber
          }
        }
      );

      console.log("‚úÖ Server response:", response);

      if (response.status === 200) {
        if (
          response.message === "Club registered successfully, pending approval"
        ) {
          Alert.alert("üéâ Th√†nh c√¥ng", "B·∫°n ƒë√£ ƒëƒÉng k√Ω v√†o CLB th√†nh c√¥ng!");
        } else {
          // Tr∆∞·ªùng h·ª£p th√†nh c√¥ng nh∆∞ng message kh√°c
          Alert.alert("‚úÖ Ph·∫£n h·ªìi", response.message || "ƒêƒÉng k√Ω th√†nh c√¥ng.");
        }
      } else {
        // N·∫øu kh√¥ng ph·∫£i status 200 th√¨ n√©m l·ªói ƒë·ªÉ xu·ªëng catch x·ª≠ l√Ω
        throw new Error(response.message || `L·ªói status ${response.status}`);
      }
    } catch (error) {
      console.error("‚ùå L·ªói ƒëƒÉng k√Ω:", error.message);
      if (error.message.includes("Members of other clubs")) {
        Alert.alert(
          "üö´ Kh√¥ng th·ªÉ ƒëƒÉng k√Ω",
          "B·∫°n ƒë√£ l√† th√†nh vi√™n c·ªßa m·ªôt CLB kh√°c. Vui l√≤ng r√∫t kh·ªèi CLB ƒë√≥ tr∆∞·ªõc khi ƒëƒÉng k√Ω."
        );
      } else {
        Alert.alert("‚ùå ƒêƒÉng k√Ω th·∫•t b·∫°i", error.message || "C√≥ l·ªói x·∫£y ra.");
      }
    } finally {
      setLoading(false);
    }
  };
  /* th√¥ng tin user kh√¥ng c·∫ßn nh·∫≠p tay l·∫ßn n·ªØa 
     sau khi ƒëƒÉng k√≠ clb th√¨ kh√¥ng c·∫ßn hi·ªÉn th·ªã n√∫t ƒëƒÉng k√≠ n·ªØa
     th√™m n√∫t truy c·∫≠p v√†o clb ƒë√≥ sau khi ƒëƒÉng k√≠ th√†nh c√¥ng
     c√°i ƒëƒÉng k√≠ clb c·ªßa b·∫°n ƒëang ƒë·ª£i duy·ªát(tr·ª´ tr∆∞·ªùng h·ª£p ch∆∞a c√≥ n√∫t ƒëƒÉng k√≠ th√¨ s·∫Ω hi·ªÉn th·ªã n√∫t ƒëƒÉng k√≠)
     status 1: C√°i n√∫t ƒëƒÉng k√≠
     status 2: ƒêang ƒë·ª£i x√©t duy·ªát
     status 3: Show c√°i n√∫t truy c·∫≠p nh√≥m
     check user n√†y ƒë√£ v√¥ clb n√†y hay ch∆∞a

*/
  return (
    <SafeAreaView style={{ flex: 1, backgroundColor: "#f8fafc" }}>
      <KeyboardAvoidingView
        style={styles.container}
        behavior={Platform.OS === "ios" ? "padding" : undefined}
      >
        <ScrollView contentContainerStyle={styles.container}>
          <Header />
          <View style={styles.banner}>
            <Text style={styles.bannerTitle}>ƒêƒÉng k√Ω C√¢u L·∫°c B·ªô</Text>
            <Text style={styles.bannerSubtitle}>
              H√£y ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin c·ªßa b·∫°n ƒë·ªÉ tham gia v√†o CLB mong mu·ªën.
            </Text>
          </View>

          <View style={styles.form}>
            <FormField
              label="üéì M√£ s·ªë sinh vi√™n"
              value={studentCode}
              onChangeText={setStudentCode}
              placeholder="VD: SE1xxxxx"
            />
            <FormField
              label="üìß Email tr∆∞·ªùng"
              value={email}
              onChangeText={setEmail}
              placeholder="VD: mail c·ªßa tr∆∞·ªùng ƒë√≥"
              keyboardType="email-address"
            />
            <FormField
              label="üë§ H·ªç v√† t√™n"
              value={fullName}
              onChangeText={setFullName}
              placeholder="VD: Nguy·ªÖn VƒÉn A"
            />
            <View style={{ marginBottom: 16 }}>
              <Text style={{ fontSize: 16, marginBottom: 4 }}>
                üè´ Ng√†nh h·ªçc
              </Text>
              <View
                style={{
                  borderWidth: 1,
                  borderColor: "#cbd5e1",
                  borderRadius: 8,
                  overflow: "hidden",
                  backgroundColor: "#fff"
                }}
              >
                <Picker
                  selectedValue={major}
                  onValueChange={(itemValue) => setMajor(itemValue)}
                  style={{ height: 55 }}
                >
                  <Picker.Item label="Ch·ªçn ng√†nh h·ªçc" value="" />
                  {data.map((item) => (
                    <Picker.Item
                      key={item.majorId}
                      label={`${item.majorName}`}
                      value={item.majorId.toString()}
                    />
                  ))}
                </Picker>
              </View>
            </View>

            <FormField
              label="üè∑Ô∏è M√£ CLB mu·ªën tham gia"
              value={clubId}
              onChangeText={setClubId}
              placeholder="VD: 63c212fd64a4cc36df5b08f5"
            />

            <TouchableOpacity
              onPress={handleSubmit}
              style={[styles.button, loading && styles.buttonDisabled]}
              disabled={loading}
              activeOpacity={0.9}
            >
              {loading ? (
                <ActivityIndicator color="#fff" />
              ) : (
                <Text style={styles.buttonText}>üöÄ Tham gia ngay</Text>
              )}
            </TouchableOpacity>
          </View>
        </ScrollView>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
};

const FormField = ({
  label,
  value,
  onChangeText,
  placeholder,
  keyboardType = "default"
}) => (
  <View style={{ marginBottom: 18 }}>
    <Text style={styles.label}>{label}</Text>
    <TextInput
      style={styles.input}
      placeholder={placeholder}
      placeholderTextColor="#999"
      value={value}
      onChangeText={onChangeText}
      keyboardType={keyboardType}
    />
  </View>
);

const styles = StyleSheet.create({
  container: {
    flexGrow: 1,
    backgroundColor: "#f8fafc",
    justifyContent: "flex-start"
  },
  banner: {
    backgroundColor: "#fff4ec",
    padding: 28,
    borderBottomLeftRadius: 32,
    borderBottomRightRadius: 32,
    alignItems: "center",
    shadowColor: "#ff7a00",
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.08,
    shadowRadius: 8,
    elevation: 3
  },
  bannerTitle: {
    fontSize: 24,
    fontWeight: "bold",
    color: "#ff6600",
    marginBottom: 6
  },
  bannerSubtitle: {
    fontSize: 14,
    color: "#6b7280",
    textAlign: "center"
  },
  form: {
    paddingHorizontal: 24,
    paddingTop: 24
  },
  label: {
    fontSize: 14,
    fontWeight: "500",
    color: "#374151",
    marginBottom: 6,
    marginLeft: 4
  },
  input: {
    backgroundColor: "#fff",
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 14,
    fontSize: 15,
    color: "#111827",
    borderWidth: 1,
    borderColor: "#e5e7eb",
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.03,
    shadowRadius: 2,
    elevation: 1
  },
  button: {
    backgroundColor: "#ff6600",
    paddingVertical: 16,
    borderRadius: 14,
    alignItems: "center",
    shadowColor: "#ff6600",
    shadowOpacity: 0.2,
    shadowOffset: { width: 0, height: 4 },
    shadowRadius: 6,
    elevation: 4,
    marginTop: 10
  },
  buttonDisabled: {
    backgroundColor: "#d4d4d8"
  },
  buttonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "600"
  }
});

export default FormRegister;
